<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:components="assets.components.*"
		 creationComplete="init()"
		 xmlns:grids="com.hp.asi.hpic4vc.ui.controls.grids.*"
		 xmlns:support="com.hp.asi.hpic4vc.ui.controls.support.*">
	
	<fx:Metadata>
		
		[DefaultMediator("com.hp.asi.hpic4vc.ui.views.Hpic4vc_vCenterCredentialsMediator")]
		
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import assets.components.Hpic4vc_AddVCCredentials;
			import assets.components.Hpic4vc_DeleteVCCredentials;
			
			import com.hp.asi.hpic4vc.ui.Hpic4vc_providerProxy;
			import com.hp.asi.hpic4vc.ui.model.DataGridWrapper;
			import com.hp.asi.hpic4vc.ui.model.TableModel;
			import com.hp.asi.hpic4vc.ui.utils.Helper;
			import com.vmware.flexutil.events.MethodReturnEvent;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			
			// Error message labels
			[Bindable]
			public var errorFoundLabel:String;
			
			[Bindable]
			public var _proxy:Hpic4vc_providerProxy;
			
			[Bindable]
			public var currentData:ArrayCollection;
			
			[Bindable]
			public var helpWindow:TitleWindow;
			
			[Bindable]
			public var serviceGuid:String;
			
			public var addCred:Hpic4vc_AddVCCredentials;
					
			private var dataProviderWatcher:ChangeWatcher;
			
			[Bindable]
			public var isAuthorized:Boolean;
			
			[Bindable]
			private var isAuthorizedWatcher:ChangeWatcher;
			
			private var _tableModel:TableModel;
			
			[Bindable]
			public function get tableModel():TableModel
			{
				return _tableModel;
			}
			
			public function set tableModel(value:TableModel):void
			{
				_tableModel = value;
			}
			
			private function init():void {
				isAuthorizedWatcher = ChangeWatcher.watch(this, ["isAuthorized"], dataAvailable);	
			}
			
			private function dataAvailable(event:Event):void {
				if (isAuthorized)
				{
					currentState = "Authorized";
				} 
				else
				{
					currentState = "NotAuthorized";
				}
				dg.validateNow();
				invalidateDisplayList();
				isAuthorizedWatcher.unwatch();
			}
			
			private function addVCCredentials():void {
				addCred = PopUpManager.createPopUp(this, Hpic4vc_AddVCCredentials, true) as Hpic4vc_AddVCCredentials;
				addCred.currentData = null;
				addCred._proxy = _proxy;
				addCred.serviceGuid = serviceGuid;
				addCred.refreshData = this;
			}
			
			private function editVCCredentials():void {
				//	helpWindow = PopUpManager.createPopUp(this, Hpic4vc_AddVCCredentials, true) as TitleWindow;
				
				currentData= new ArrayCollection(dg.selectedItems);
				if (currentData.length > 0) {
					var editPopUp:Hpic4vc_AddVCCredentials;
					editPopUp = PopUpManager.createPopUp(this, Hpic4vc_AddVCCredentials, true) as Hpic4vc_AddVCCredentials;
					//	editPopUp = true;
					editPopUp.title = "Edit Credentials";
					editPopUp.editMode = true;
					editPopUp.currentData = currentData;
					editPopUp._proxy = _proxy;
					editPopUp.serviceGuid = serviceGuid;
					editPopUp.refreshData = this;
				}
				else {
					Alert.show("Please select a credential from the table first before clicking edit");
				}    
			}
			
			private function deleteVCCredentials():void {
				var deleteCred:Hpic4vc_DeleteVCCredentials;
				currentData= new ArrayCollection(dg.selectedItems);
				if (currentData.length < 1)
					Alert.show(Helper.getString('selectRow.text'));
				else {
					deleteCred = PopUpManager.createPopUp(this, Hpic4vc_DeleteVCCredentials, true) as Hpic4vc_DeleteVCCredentials;;
					deleteCred.currentData = currentData;
					deleteCred._proxy = _proxy;
					deleteCred.serviceGuid = serviceGuid;
					deleteCred.refreshData = this;
				}
			}
			public function refreshDataGrid():void {
				_proxy.getVCCredentials(serviceGuid, onGettingVCCredentialsPageUpdate);
			}
			
			
			private function onGettingVCCredentialsPageUpdate(event:MethodReturnEvent):void {
				
				this.tableModel = event.result as TableModel;
				dg.dataProvider.refresh();
			}
			
		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout paddingLeft="15"
						  paddingRight="15"
						  paddingTop="15"
						  paddingBottom="15"/>
	</s:layout>
	
	<s:states>
		<s:State name="Loading"/>
		<s:State name="Authorized"/>
		<s:State name="NotAuthorized"/>
	</s:states>	
	
	<mx:VBox width="100%" height="100%" minHeight="0" minWidth="0">

		<mx:VBox width="100%">	
			
			<mx:Text styleName="gettingStartedTextFont" width="99%"
					 text="{Helper.getString('Hpic4vc_vCenterCredentials.text')}"/>		
			<s:Label text=""/>
			
			<mx:Text styleName="gettingStartedTextFont" width="99%"
					 text="{Helper.getString('Hpic4vc_vCenterCredentials.note')}"/> 
			
			<s:Label text=""/>
			
			<mx:Text styleName="gettingStartedPagesHeaderText"
					 text="{Helper.getString('Hpic4vc_vCenterCredentials.vCenterInstanceTitle')}"/>
			<mx:HRule width="100%"/>
			
		</mx:VBox>
		
		<s:VGroup x="0" y="45" height="100%" width="100%" includeIn="Authorized">
			<mx:HBox horizontalGap="9">				
				<mx:Image source="@Embed(source='/assets/images/edit_add.png')" click="addVCCredentials()" toolTip="{Helper.getString('addRecord.label')}" buttonMode="true"/>
				<mx:Image source="@Embed(source='/assets/images/pencil_medium.png')" click="editVCCredentials()" buttonMode="true"/>
				<mx:Image source="@Embed(source='/assets/images/delete.png')" click="deleteVCCredentials()" toolTip="{Helper.getString('deleteRecord.label')}" buttonMode="true"/>
				<mx:Image source="@Embed(source='/assets/images/refresh.png')" click="refreshDataGrid()" buttonMode="true"/>
			</mx:HBox>
			
			<mx:Label text="{errorFoundLabel}" 
					  visible="{errorFoundLabel.length>0}" 
					  includeInLayout="{errorFoundLabel.length>0}" 
					  styleName="errorMessage"/>
			<s:VGroup height="100%" width="100%" 
					  includeInLayout="{!(errorFoundLabel.length>0)}" visible="{!(errorFoundLabel.length>0)}" >
				<s:HGroup width="100%" horizontalAlign="right" 
						  includeInLayout="{!(errorFoundLabel.length>0)}" visible="{!(errorFoundLabel.length>0)}" id="toolbar" >
					<support:FilterTextInput watermark="Filter" color="#333333" dataGrid="{dg}"/>
				</s:HGroup>
				<grids:HPDataGrid id="dg" enablePaging="true" tableModel="{tableModel}" height="100%" width="100%"
								  includeInLayout="{!(errorFoundLabel.length>0)}" visible="{!(errorFoundLabel.length>0)}"
								  toolbar="{toolbar}" showHeaderMenu="false"/>
			</s:VGroup>
		</s:VGroup>
		
		<s:VGroup x="0" y="45" height="100%" width="100%" includeIn="NotAuthorized">
			<mx:Text text="{Helper.getString('noPermission')}" width="99%"/>
		</s:VGroup>
		
	</mx:VBox>
</s:Group>