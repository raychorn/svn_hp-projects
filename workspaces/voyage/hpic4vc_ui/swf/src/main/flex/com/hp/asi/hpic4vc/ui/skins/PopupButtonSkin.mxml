<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The Spark skin class for the MX PopUpButton component. 

@see mx.controls.PopUpButton

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<local:SparkSkinForHalo xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
						xmlns:local="mx.skins.spark.*"
						minWidth="21" minHeight="21"
						alpha.disabled="0.5">
	
	<fx:Script>
		/* Define the skin elements that should not be colorized. 
		For button, the graphics are colorized but the arrow is not. */
		static private const exclusions:Array = ["arrow"];
		/**
		 *  @private
		 */
		override public function get colorizeExclusions():Array {return exclusions;}
		
		/* Define the symbol fill items that should be colored by the "symbolColor" style. */
		static private const symbols:Array = ["arrowFill1", "arrowFill2"];
		/**
		 *  @private
		 */
		override public function get symbolItems():Array {return symbols};
		
		/**
		 * @private
		 */
		override protected function initializationComplete():void
		{
			useChromeColor = true;
			super.initializationComplete();
		}
		
		/**
		 *  @private
		 */
		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
		{
			var cr:Number = getStyle("cornerRadius");
			
			if (cornerRadius != cr)
			{
				cornerRadius = cr;
			//	shadow.radiusX = cornerRadius;
				fill.topLeftRadiusX = cornerRadius;
				fill.bottomLeftRadiusX = cornerRadius;

		//		lowlight.radiusX = cornerRadius;
		//		highlight.radiusX = cornerRadius;
				if(border)
				border.radiusX = cornerRadius;
			}
			
			//if (highlightStroke) highlightStroke.radiusX = cornerRadius;
			
			super.updateDisplayList(unscaledWidth, unscaledHeight);
		}
		
		private var cornerRadius:Number = 2;
	</fx:Script>
	
	<!-- states -->
	<local:states>
		<s:State name="up" />
		<s:State name="over" stateGroups="overStates" />
		<s:State name="down" stateGroups="downStates" />
		<s:State name="disabled" />
		<s:State name="popUpOver" stateGroups="overStates, popUpStates" />
		<s:State name="popUpDown" stateGroups="downStates, popUpStates" />
	</local:states>
	
	<!-- layer 2: fill -->
	<!--- @private -->
	<s:Rect id="fill" left="1" right="1" top="1" bottom="1" radiusX="2">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xFFFFFF" 
								 color.overStates="0xFFFFFF" 
								 color.downStates="0xDAE0E4" 
								 alpha="0"
								 alpha.overStates="1"
								 alpha.downStates="1" />
				<s:GradientEntry color="0xFFFFFF" 
								 color.overStates="0xDAE0E4" 
								 color.downStates="0xFFFFFF" 
								 alpha="0"
								 alpha.overStates="1"
								 alpha.downStates="1"
								 />
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
	<!--- @private -->
	<s:Rect id="border" left="0" right="0" top="0" bottom="0" width="69" height="20" radiusX="2" includeIn="overStates,downStates">
		<s:stroke>
			<s:LinearGradientStroke  weight="1">
				<s:GradientEntry color="0xCCD5DB" 
								 />
				<s:GradientEntry color="0xCCD5DB" 
								 />
			</s:LinearGradientStroke>
		</s:stroke>
	</s:Rect>
	
	
	<!-- layer 8: arrow -->
	<!--- @private -->
	<s:Path right="9" verticalCenter="2" id="arrow" 
			data="M 4.0 4.0 L 4.0 3.0 L 5.0 3.0 L 5.0 2.0 L 6.0 2.0 L 6.0 1.0 L 7.0 1.0 L 7.0 0.0 L 0.0 0.0 L 0.0 1.0 L 1.0 1.0 L 1.0 2.0 L 2.0 2.0 L 2.0 3.0 L 3.0 3.0 L 3.0 4.0 L 4.0 4.0">
		<s:fill>
			<s:RadialGradient rotation="90" focalPointRatio="1">    
				<!--- @private -->
				<s:GradientEntry id="arrowFill1" color="0" alpha="0.6" />
				<!--- @private -->
				<s:GradientEntry id="arrowFill2" color="0" alpha="0.8" />
			</s:RadialGradient>
		</s:fill>
	</s:Path>
</local:SparkSkinForHalo>