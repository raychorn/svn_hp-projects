<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright 2012 Hewlett-Packard Development Company, L.P. -->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:net="flash.net.*"
		 creationComplete="fnInit()">
	
	<fx:Declarations>
		<net:FileReference id="fileReference"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.hp.asi.hpic4vc.ui.utils.Helper;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.collections.ICollectionView;
			import mx.collections.IViewCursor;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
			import mx.events.AdvancedDataGridEvent;
			import mx.utils.ObjectUtil;
			
			[Bindable]
			public var dataProvider:ArrayCollection;

			[Bindable]
			public var columns:Array = new Array();
			
			[Bindable]
			public var noRecordsFoundLabel:String;
			
			[Bindable]
			private var dataWatcher:ChangeWatcher;
			
			[Bindable]
			private var errorWatcher:ChangeWatcher;
			
			[Bindable]
			private var noInfoFoundWatcher:ChangeWatcher;
			
			[Bindable]
			private var loading:String;
			
			[Bindable]
			public var errorFoundLabel:String;
			
			private function fnInit():void
			{
				dataWatcher   		 = ChangeWatcher.watch(this, ["dataProvider"], dataAvailable);
				noInfoFoundWatcher   = ChangeWatcher.watch(this, ["noRecordsFoundLabel"], noInfoAvailable);
				errorWatcher  		 = ChangeWatcher.watch(this, ["errorFoundLabel"], errorOccurred);
				currentState  		 = "DataLoading";
				loading       		 = Helper.getString("loading");
				
			}
			
			private function dataAvailable(event:Event):void {
				this.currentState = "DataAvailable";
				invalidateDisplayList();
				dataWatcher.unwatch();
				errorWatcher.unwatch();
				
			}
			
			private function noInfoAvailable(event:Event):void {
				this.currentState = "NoInfoAvailable";
				invalidateDisplayList();
			}
			
			private function errorOccurred(event:Event):void {
				this.currentState = "DataError";
				invalidateDisplayList();
			}
					
			protected function filterBox_changeHandler():void
			{
				if (this.dataProvider.filterFunction == null) {
					this.dataProvider.filterFunction = this.filterColumns;
				}
				this.dataProvider.refresh();
			}
			
			protected function filterBox_clickHandler(event:MouseEvent):void
			{
				filterBox.text = "";
				this.dataProvider.filterFunction = this.filterColumns;
				this.dataProvider.refresh();
			}
			
			private function filterColumns(item:Object):Boolean {				
				if (filterBox.text != "") { 
					var key:String = filterBox.text;
					
					key = key.toLowerCase();
					
					if (key != "")
					{
						for (var o:String in item)
						{
							var value:String = item[o];
							if (value != null) {
								value = value.toLowerCase();
								if (value.indexOf(key) >= 0)
								{
									return true;
								}
							}
						}
					} 
				} else {
					return true;
				}
				return false;
			}
			private static var colIndex:int;
			
			private function headerClicked(event:AdvancedDataGridEvent):void {
				// Get the column index to allow sorting
				colIndex  = event.columnIndex;
			}

			public static function sortCompare(obj1:Object, obj2:Object):int 
			{ 
				trace ("Comparing column index: " + colIndex);
				
				var value1:String = (obj1[colIndex] == '' || obj1[colIndex] == null) ? null : new String ((obj1[colIndex] as String).toLowerCase());
				
				var value2:String = (obj2[colIndex] == '' || obj2[colIndex] == null) ? null : new String ((obj2[colIndex] as String).toLowerCase());
				
				return ObjectUtil.stringCompare(value1, value2);
			}

			protected function exportIcon_clickHandler(event:MouseEvent):void
			{
				var str:String = new String();
				
				var hv:ICollectionView 	= hpic4vcGrid.dataProvider as ICollectionView;
				var cursor:IViewCursor 	= hv.createCursor();
				var columns:Array 		= hpic4vcGrid.columns;
				var columnCount:int		= hpic4vcGrid.columns.length;
				
				// Get the column names
				for (var i:int=0; i < columnCount; i++)
				{
					str+=(columns[i] as AdvancedDataGridColumn).headerText + ",";
				}
				
				// Get the data	
				while (!cursor.afterLast)
				{             
					str+="\n";
					for (var k:int=0; k < columnCount; k++)
					{
						str+=(columns[k] as AdvancedDataGridColumn).itemToLabel(cursor.current) + ",";
					}
					cursor.moveNext();
				}
				
				// Open the Operating system File Reference to save the file to the desired location
				fileReference.save(str, "export.csv"); 
			}

		]]>
	</fx:Script>	
	<!-- Declarations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<!-- UI components ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	
	<s:states>
		<s:State name="DataAvailable"/>
		<s:State name="DataLoading"/>
		<s:State name="DataError"/>
		<s:State name="NoInfoAvailable"/>
	</s:states>
	
	<s:VGroup height="30" includeIn="DataLoading">
		<s:Label text="{loading}" verticalCenter="0" paddingTop="5"/>
	</s:VGroup>
	
	<s:VGroup height="30" includeIn="NoInfoAvailable">
		<mx:Text width="100%" text="{noRecordsFoundLabel}" verticalCenter="0" paddingTop="5"/>
	</s:VGroup>
	
	<s:VGroup height="30" includeIn="DataError">
		<mx:Text width="100%" text="{errorFoundLabel}" styleName="errorMessage" paddingTop="5"/>
	</s:VGroup>

	<s:Group height="100%" width="100%" includeIn="DataAvailable">

		<s:layout>
			<s:VerticalLayout/>
		</s:layout>	
		
		<s:HGroup horizontalAlign="right" width="100%">
			<s:TextInput id="filterBox" width="157" borderVisible="true"
						 click="filterBox_clickHandler(event)"
						 change="filterBox_changeHandler()" text="Filter"
						 styleName="filterText">
			</s:TextInput>
		</s:HGroup>
		
		<mx:AdvancedDataGrid id="hpic4vcGrid"
					 width="100%" height="100%"
					 headerStyleName="mxDataGridHeader"
					 groupedColumns="{columns}"
				     dataProvider="{dataProvider}" 
					 horizontalScrollPolicy="on"
					 sortableColumns="true"
					 sortExpertMode="true"
					 headerRelease="headerClicked(event)">
		</mx:AdvancedDataGrid>
		
		<s:Group id="bottomGroup" width="100%">
			<mx:HBox width="100%" height="25" styleName="datagridFooterBox">
				<mx:Text id="rowCount"
                         styleName="headerText" 
                         text="{dataProvider.length} items"/>
				<s:Image click="exportIcon_clickHandler(event)"
					     source="@Embed(source='/assets/images/export.png')" 
						 toolTip="{Helper.getString('exportToCSV')}"
						 buttonMode="true"/> 
		    </mx:HBox>
		</s:Group>
		
	</s:Group>
	
	
</s:Group>

