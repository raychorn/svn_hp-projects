<?xml version="1.0" encoding="utf-8"?>

<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   close="PopUpManager.removePopUp(this);"
			   creationComplete="handleCreationComplete();" styleName="refreshPopUp"
			   title="{Helper.getString('addRecord.label')}" xmlns:components="assets.components.*">
			   
			
			 
	<fx:Script>
		<![CDATA[
			import com.hp.asi.hpic4vc.ui.Hpic4vc_providerProxy;
			import com.hp.asi.hpic4vc.ui.model.StringModel;
			import com.hp.asi.hpic4vc.ui.model.TableModel;
			import com.hp.asi.hpic4vc.ui.views.Hpic4vc_hpOneViewCredentials;
			import com.vmware.flexutil.events.MethodReturnEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.ValidationResultEvent;
			import mx.logging.ILogger;
			import mx.logging.Log;
			import mx.validators.Validator;
			
			import spark.components.Application;
			[Bindable]
			public var serviceGuid:String;
			
			[Bindable]
			public var currentData:ArrayCollection;
						
			[Bindable]
			public var refreshData:Hpic4vc_hpOneViewCredentials;
			
			[Bindable]
			public var editMode:Boolean;
						
			[Bindable]
			public var _proxy:Hpic4vc_providerProxy;

			[Bindable]
			public var _logger:ILogger = Log.getLogger("Hpic4vc_AddHPOneViewCredentials");
			
			import com.hp.asi.hpic4vc.ui.utils.Helper;
			
			import mx.managers.PopUpManager;
			
			private var validators:Array;
			
			private function handleCreationComplete():void {
			validators = new Array();
			validators.push(host_stringValidator);
			validators.push(username_stringValidator);
			validators.push(password_stringValidator);
			PopUpManager.centerPopUp(this);
			
			if (editMode) {
				hostLabel.enabled = false;
			}
			else {
				hostLabel.enabled = true;
			}
			}
			
		    private function onAddHPOneViewCredentials(e:MethodReturnEvent):void{
				var stringModel:StringModel = e.result as StringModel;
				if (e.result == null)
					_logger.debug("No data returned for add HP OneVIew Credentials");
				else {
				if (stringModel.errorMessage != null)
					Alert.show(stringModel.errorMessage);
				else
					Alert.show(stringModel.data, null, Alert.OK, null, handleOk);
				}
				removePopUp();
		    }
			
			private function handleOk(event:CloseEvent):void {
				refreshData.refreshDataGrid();
			}
			
			private function removePopUp():void {
				PopUpManager.removePopUp(this);
			}
			
			private function validateAndSubmit(e:Event):void{
			var errorArray:Array = Validator.validateAll(validators);
			var isValid:Boolean = errorArray.length == 0;
			if(!isValid){
			
				var resultEvt:ValidationResultEvent;
				var errorMessages:Array = new Array();
				
				for each (resultEvt in errorArray){
				errorMessages.push(resultEvt.message);
				}
			
			//	Alert.show(errorMessages.join("\n\n"),"Errors", Alert.OK);	
			}
			else{
				if (editMode)
				{
					_proxy.editHPOneViewCredential(serviceGuid, host.text, userName.text, password.text, currentData[0].rowId, onAddHPOneViewCredentials);
					submitId.enabled = false;
					cancelId.enabled = false;
					removePopUp();
				}
				else
					_proxy.getHPOneViewCredentials(serviceGuid, onGettingHPOneViewCredentials);
			}
			}
			private function onGettingHPOneViewCredentials(event:MethodReturnEvent):void {
				if (event.result != null) {
					var tableModel:TableModel= event.result as TableModel;
					var tableData:ArrayCollection = tableModel.rowRawData;
					var found:Boolean = false;
					for (var i:int=0; i<tableData.length; i++) {
						var eachEntry:ArrayCollection = tableData[i];
						if (host.text.toLocaleLowerCase().match(eachEntry[0].toString().toLowerCase())) {
							found = true;
							Alert.show("A HP OneView has already been configured with the specified hostname. Please modify the existing HP OneView.", "HP OneView already configured", Alert.OK, null, null);
						}
						else
							continue;
					}
					if (!found) {
						_proxy.addHPOneViewCredential(serviceGuid, host.text, userName.text, password.text, onAddHPOneViewCredentials);
						submitId.enabled = false;
						cancelId.enabled = false;
					}
					removePopUp();
				}
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<mx:StringValidator id="username_stringValidator" source="{userName}" property="text" requiredFieldError="{Helper.getString('userReqField.text')}"/>
		<mx:StringValidator id="password_stringValidator" source="{password}" property="text" requiredFieldError="{Helper.getString('pwdReqField.text')}"/>
		<mx:StringValidator id="host_stringValidator" source="{host}" property="text" required="true" requiredFieldError="{Helper.getString('hostReqField.text')}" />
	</fx:Declarations>
	
	<s:VGroup>
		<s:Form id="certForm" fontWeight="normal">
			<s:layout>
				<s:FormLayout gap="-10"/>
			</s:layout>
			<s:FormItem id="hostLabel" label="{Helper.getString('host.label')}" required="true">
				<s:TextInput id="host" text = "{currentData.getItemAt(0).Hostname}"/>
			</s:FormItem> 
	
			<s:FormItem id="userNameLabel" label="{Helper.getString('username.label')}" required="true">
				<s:TextInput id="userName" text = "{currentData.getItemAt(0).Username}"/>
			</s:FormItem> 
			
			<s:FormItem id="passwordLabel" label="{Helper.getString('password.label')}" required="true">
				<s:TextInput id="password" displayAsPassword="true"/>
			</s:FormItem> 
		</s:Form>
		
	
		</s:VGroup>
	<s:controlBarContent>
		<s:Spacer width="99%"/> 
		<s:Button id="submitId" label="{Helper.getString('submitLabel')}" click="validateAndSubmit(event);" enabled="true"/>
		<s:Button id="cancelId" label="{Helper.getString('cancelLabel')}" click="removePopUp();" enabled="true"/>
	</s:controlBarContent>
	
</s:TitleWindow>
