<?xml version="1.0"?>

<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  creationComplete="init()"
		  implements="assets.components.Hpic4vc_Overview_BaseComponent">
	
	<fx:Metadata>
		[Event(name="taskLabelClicked", type="flash.events.Event")]
		[DefaultMediator("assets.components.Hpic4vc_Overview_NewsfeedMediator")]
		[Event(name="{com.vmware.ui.events.NavigationRequest.NAVIGATION_REQUEST}", type="com.vmware.ui.events.NavigationRequest")]
	</fx:Metadata>

	<fx:Script>

		<![CDATA[
			import com.hp.asi.hpic4vc.ui.model.NewsItem;
			import com.hp.asi.hpic4vc.ui.utils.Helper;
			import com.hp.asi.hpic4vc.ui.views.Hpic4vc_manage_uiView;
			import com.hp.asi.hpic4vc.ui.views.Hpic4vc_uiView;
			import com.vmware.core.model.IResourceReference;
			import com.vmware.ui.events.NavigationRequest;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.IUIComponent;
			import mx.utils.ObjectUtil;
			
			
			[Embed(source="/assets/images/success.png")]
			[Bindable]
			public var greenImg:Class;
			
			[Embed(source="/assets/images/info.png")]
			[Bindable]
			public var infoImg:Class;
			
			[Embed(source="/assets/images/error.png")]
			[Bindable]
			public var redImg:Class;
			
			[Embed(source="/assets/images/statusWarning.png")]
			[Bindable]
			public var triangleImg:Class;
			
			[Bindable]
			public var newsData:ArrayCollection;	
			[Bindable]
			public var noInfoFoundLabel:String;
			[Bindable]
			public var errorFoundLabel:String;
			
			private var dataWatcher:ChangeWatcher;
			[Bindable]
			private var errorWatcher:ChangeWatcher;
			[Bindable]
			private var loading:String;
			[Bindable]
			public var hpic4vc_manage_uiView:Hpic4vc_manage_uiView;
			
			[Bindable]
			public var _contextObject:IResourceReference;
			[Bindable]
			private var noInfoFoundWatcher:ChangeWatcher;
			[Bindable]
			private var dashlet_BaseMediator:Hpic4vc_Dashlet_BaseMediator = new Hpic4vc_Dashlet_BaseMediator();
			[Bindable]
			public var newsDataIcons:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var arr2:ArrayCollection = new ArrayCollection([
				{src:greenImg},{src:infoImg}]);
			
			public function showPortlet(contextObject:IResourceReference) : void {
				this.visible = true;
				this._contextObject = contextObject;
			}
			
			public function onLinkClicked(event:MouseEvent, link:String):void {
				var e:NavigationRequest = new NavigationRequest();
				e.context = _contextObject;
				if (_contextObject != null) {
					e.targetViewUid = dashlet_BaseMediator.getTargetViewURL(_contextObject.type, Hpic4vc_TabNameEnum.NEWSFEED);
					dispatchEvent(e);
				}
				dashlet_BaseMediator.moreClicked(event, Hpic4vc_TabNameEnum.NEWSFEED);
			}
			
			public function getLinks():ArrayCollection {
				return new ArrayCollection([Helper.getString("more")]);
			}
			
			private function init():void
			{
				dataWatcher  = ChangeWatcher.watch(this, ["newsData"], dataAvailable);	
				noInfoFoundWatcher   = ChangeWatcher.watch(this, ["noInfoFoundLabel"], noInfoAvailable);
				errorWatcher  		 = ChangeWatcher.watch(this, ["errorFoundLabel"], errorOccurred);
				loading      = Helper.getString("loading");
				currentState = "DataLoading";
			}
						
			private function errorOccurred(event:Event):void {
				currentState = "DataError";
				invalidateDisplayList();
			}
			
			private function noInfoAvailable(event:Event):void {
				this.currentState = "NoInfoAvailable";
				invalidateDisplayList();
			}
			
			private function dataAvailable(event:Event):void {
				//(owner as IUIComponent).percentHeight=100;
				for(var i:int=0; i<newsData.length; i++) {
					if(newsData.getItemAt(i).valueOf().formattedStatus == "FAILED") {
						newsDataIcons.addItem(redImg);
					} else if (newsData.getItemAt(i).valueOf().formattedStatus == "OK") {
						newsDataIcons.addItem(greenImg);
					} else if (newsData.getItemAt(i).valueOf().formattedStatus == "WARNING") {
						newsDataIcons.addItem(triangleImg);
					} else if (newsData.getItemAt(i).valueOf().formattedStatus == "INFORMATION") {
						newsDataIcons.addItem(infoImg);
					} 
				}
				currentState = "DataAvailable";
				invalidateDisplayList();
				dataWatcher.unwatch();
				errorWatcher.unwatch();
			}
		]]>
		
	</fx:Script>
	
	<s:states>
		<s:State name="DataAvailable"/>
		<s:State name="DataLoading"/>
		<s:State name="DataError"/>
		<s:State name="NoInfoAvailable"/>
	</s:states>

	<!--mx:Image id="i1" source="{arr.getItemAt(1)}" visible="true"/-->
	<!--s:Image id="i2" source="{arr2.getItemAt(0).src}" visible="true"/-->
		
		<s:VGroup x="10" y="20" width="100%"
				  paddingLeft="10" paddingRight="10"
				  paddingBottom="10" paddingTop="10">
			
			<mx:VBox height="30" includeIn="DataLoading" width="100%">
				<mx:Text text="{loading}" verticalCenter="0" width="100%"/>
			</mx:VBox>
			
			<mx:VBox includeIn="NoInfoAvailable" width="100%">
				<mx:Text text="{noInfoFoundLabel}" verticalCenter="0" width="100%"/>
			</mx:VBox>
			
			<mx:VBox includeIn="DataError" width="100%">
				<mx:Text width="100%" text="{errorFoundLabel}" styleName="errorMessage"/>
			</mx:VBox>
			
			<mx:Box includeIn="DataAvailable" width="100%">
				<mx:Repeater id="newsRepeater" dataProvider="{newsData}">     
					<mx:HBox width="100%">
						<mx:Image id="newsFeedIcon" source="{newsDataIcons.getItemAt(newsRepeater.currentIndex)}" visible="true"/>
						<!--mx:Label id="statusId" text="{newsRepeater.currentItem.formattedStatus as String}" paddingRight="5" width="100"/-->
						<mx:VBox width="100%">
							<mx:Text id="messageId" text="{newsRepeater.currentItem.formattedMessage as String}" paddingLeft="5" width="100%"/>
							<mx:Text id="timeId" text="{newsRepeater.currentItem.formattedTimeStamp as String}" paddingLeft="5" paddingBottom="5" width="100%"/>
						</mx:VBox>
					</mx:HBox>
				</mx:Repeater>
			</mx:Box>
		</s:VGroup>
	
</s:VGroup>