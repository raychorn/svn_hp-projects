<project name="hpic4vc_ui" default="build-war">
   <description>
       Ant build script example for the Flex UI plug-in 'hpic4vc_ui'.
       The output is a bundle in target/hpic4vc_ui-war.war that can be
       copied in the "plugins" folder of the plugin-package.
       -----------------------------------------------------------------------
       NOTE: you don't need to use this script during development with Eclipse
       except to compile resources, see the compile-resources target below.
       -----------------------------------------------------------------------
   </description>

   <!-- SDK home folders should be set in environment variables -->
   <property environment="env"/>
   <property name="FLEX_HOME"         value="${env.FLEX_HOME}"/>
   <property name="CASL_VENDORLIB"    value="${env.CASL_VENDORLIB}"/>
   <property name="VSPHERE_SDK_HOME"  value="${CASL_VENDORLIB}/lib/vsphere-client-sdk"/>
   <property name="FLEXICIOUS_HOME"   value="${CASL_VENDORLIB}/lib/Flexicious"/>

   <!-- name of the war output directory and bundle file -->
   <property name="WAR_NAME"        value="hpic4vc_ui-war"/>
   <property name="BUILD_DIR"       value="${basedir}/war/target"/>
   <property name="WAR_DIR"         value="${BUILD_DIR}/${WAR_NAME}"/>
   <property name="SRC_DIR"         value="${basedir}/swf/src/main/flex"/>
   <property name="STORAGE_SRC_DIR" value="${basedir}/../hpic4vc_storage_ui/swf/src/main/flex"/>
   <property name="SERVER_SRC_DIR"  value="${basedir}/../hpic4vc_server_ui/swf/src/main/flex"/>
   <property name="WEBAPP_DIR"      value="${basedir}/war/src/main/webapp"/>
   <property name="TEMP_LOCALE"     value="${SRC_DIR}/temp_locale"/>
   <property name="WAR_IMAGES"      value="${WAR_DIR}/assets/images"/>

   <!-- Import the definition of mxmlc-macro -->
   <import file="${VSPHERE_SDK_HOME}/resources/flex-macros.xml"/>

   <!-- clean the generated build and temp files -->
   <target name="clean">
      <delete dir="${basedir}/swf/target"/>
      <delete dir="${BUILD_DIR}" />
   </target>
	
   <!-- clean the generated temp locale -->
   <target name="clean-temp">
      <delete dir="${TEMP_LOCALE}" />
   </target>
	
   <!-- concatonates all the locale files into one temporary locale for compilation -->
   <target name="concat-resources">
      <concat destfile="${TEMP_LOCALE}/en_US/Hpic4vc_uiResources.properties"
   	          fixlastline="yes">
         <fileset file="${SRC_DIR}/locale/en_US/*" />
      	 <fileset file="${STORAGE_SRC_DIR}/locale/en_US/*" />
      	 <fileset file="${SERVER_SRC_DIR}/locale/en_US/*" />
      </concat>
   </target>
	
   <!-- Compile the plugin source into .swf file.
        ECLIPSE NOTE: building the Flex project in Eclipse does the same thing.
   -->
   <target name="compile-flex" depends="concat-resources">
      <mxmlc-macro file="'${SRC_DIR}'/Hpic4vc_ui.mxml">
        <arg line="-source-path+='${SRC_DIR}'"/>
        <arg line="-source-path+='${STORAGE_SRC_DIR}'"/>
        <arg line="-source-path+='${SERVER_SRC_DIR}'"/>
        <arg line="-source-path+='${SRC_DIR}'/locale/{locale}"/>
      	<arg line="-include-libraries+='${FLEXICIOUS_HOME}/libs/UltimateLib.swc,${FLEXICIOUS_HOME}/libs/AlivePDF.swc,${FLEXICIOUS_HOME}/libs/DashboardLib.swc'" />
        <arg line="-resource-bundle-list='${BUILD_DIR}'/bundles.properties" />
      	<arg line="-debug=true"/>
        <arg line="-output='${WAR_DIR}'/Hpic4vc_ui.swf"/>
     </mxmlc-macro>      	
   </target>

   <!-- Compile separate bundle resource files globalview-ui-{locale}.swf.
        File name must match the name declared in plugin.xml <resource> tag.
        ECLIPSE NOTE: building the Flex project in Eclipse does NOT compile resources
        automatically, you can run this compile-resources target from Eclipse.
   -->
   <target name="compile-resources">
   	  <property file="${BUILD_DIR}/bundles.properties"/>
   	
   	  <!-- default US version -->
      <mxmlc-macro>
        <arg line="-locale=en_US" />
        <arg line="-source-path+='${TEMP_LOCALE}'/{locale}"/>
        <arg line="-output='${basedir}'/swf/target/locales/hpic4vc_ui-resources-en_US.swf"/>
        <arg line="-include-resource-bundles ${bundles}" />      	
      </mxmlc-macro>
   	
      <!-- Copy all bundle resources to WAR_DIR -->
      <copy todir="${WAR_DIR}/locales" failonerror="false">
         <fileset dir="${basedir}/swf/target/locales"/>
      </copy>
   </target>

   <!-- Build the war bundle -->
   <target name="build-war" depends="clean, compile-flex, compile-resources, clean-temp">
      <!-- Copy assets and webapp folders if any -->
      <copy todir="${WAR_DIR}/assets" failonerror="false">
         <fileset dir="${basedir}/swf/src/main/flex/assets"/>
      	 <fileset dir="${STORAGE_SRC_DIR}/assets"/>
      	 <fileset dir="${SERVER_SRC_DIR}/assets"/>
      </copy>
      <copy todir="${WAR_DIR}">
         <fileset dir="${WEBAPP_DIR}"/>
      </copy>

      <!-- Create the war bundle -->
      <jar  destfile="${BUILD_DIR}/${WAR_NAME}.war"
            manifest="${WEBAPP_DIR}/META-INF/MANIFEST.MF"
            basedir="${WAR_DIR}"/>

   </target>
</project>

