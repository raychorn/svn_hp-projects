<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:components="assets.components.*"
		 creationComplete="init()"
		 xmlns:grids="com.hp.asi.hpic4vc.ui.controls.grids.*"
		 xmlns:support="com.hp.asi.hpic4vc.ui.controls.support.*">
	
	<fx:Metadata>
		
		[DefaultMediator("com.hp.asi.hpic4vc.ui.views.Hpic4vc_serverCredentialsMediator")]
		
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import assets.components.AddOrDeleteCredentialsEvent;
			
			import com.hp.asi.hpic4vc.ui.model.ApplicationDataModel;
			
			import assets.components.Hpic4vc_AddCredentials;
			import assets.components.Hpic4vc_DeleteCredentials;
			
			import com.hp.asi.hpic4vc.ui.Hpic4vc_server_providerProxy;
			import com.hp.asi.hpic4vc.ui.model.TableModel;
			import com.hp.asi.hpic4vc.ui.utils.Helper;
			import com.vmware.flexutil.events.MethodReturnEvent;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			
			private var count:int = 0;
			
			public var currentData:ArrayCollection;
			[Bindable]
			public var _proxy:Hpic4vc_server_providerProxy;
			[Bindable]
			public var serviceGuid:String;
			[Bindable]
			public var errorFoundLabel:String;
			private var _view:Hpic4vc_serverCredentials;
			[Bindable]
		
			
			
			private var _tableModel:TableModel;
			
			[Bindable]
			public function get tableModel():TableModel
			{
				return _tableModel;
			}
			
			public function set tableModel(value:TableModel):void
			{
				_tableModel = value;
			}
			
			[Bindable]
			private var appModel:ApplicationDataModel = ApplicationDataModel.getInstance();
			
			private function init():void {
				
			}
			
			public function dataAvailable():void {
				
				dg.validateNow();
				invalidateDisplayList();
				
			}
			
			
			
//			private function onCreationComplete():void{
//				FlexGlobals.topLevelApplication.addEventListener(AddOrDeleteCredentialsEvent.UPDATE_CREDENTIALS,updateCredentials);
//				this.dg.addEventListener(ListEvent.ITEM_CLICK, onDataGridItemClick);				
//			}
//			
//			private function onDataGridItemClick(e:ListEvent):void{
//				currentData = e.itemRenderer.data as ArrayCollection
//			}
			
			private function addCredentials():void {
				var addPopUp:Hpic4vc_AddCredentials;
				addPopUp = PopUpManager.createPopUp(this, Hpic4vc_AddCredentials, true) as Hpic4vc_AddCredentials;
				addPopUp.editMode = false;
				addPopUp.currentData = null;
				//addPopUp.serverData = vCenterCredGrid.hpic4vcGrid.dataProvider as ArrayCollection;
				addPopUp._proxy = _proxy;
				addPopUp.serviceGuid = serviceGuid;
				addPopUp.refreshData = this;
			}
			
			private function editCredentials():void {
				currentData= new ArrayCollection(dg.selectedItems);
				if (currentData.length > 0) {
					var editPopUp:Hpic4vc_AddCredentials;
					editPopUp = PopUpManager.createPopUp(this, Hpic4vc_AddCredentials, true) as Hpic4vc_AddCredentials;
					editPopUp.editMode = true;
					editPopUp.title = "Edit Credentials";
					editPopUp.currentData = currentData;
					editPopUp._proxy = _proxy;
					editPopUp.serviceGuid = serviceGuid;
					editPopUp.refreshData = this;
				}
				else {
					Alert.show(Helper.getString('ALERT_SERVER_CREDENTIALS_WARNING_EDIT'));
				}
			}
			
			private function deleteCredentials():void {
				currentData= new ArrayCollection(dg.selectedItems);
				if (currentData.length > 0) {
					var delPopUp:Hpic4vc_DeleteCredentials;
					delPopUp = PopUpManager.createPopUp(this, Hpic4vc_DeleteCredentials, true) as Hpic4vc_DeleteCredentials;
					delPopUp.currentData = currentData;
					delPopUp._proxy = _proxy;
					delPopUp.serviceGuid = serviceGuid;
					delPopUp.refreshData = this;
				}
				else {
					Alert.show(Helper.getString('ALERT_SERVER_CREDENTIALS_WARNING_DELETE'));
				}
			}
			
			public function updateCredentials(e:AddOrDeleteCredentialsEvent=null):void{
				_proxy.getServerCredentials(serviceGuid, refreshDataGrid);    
			}
			
			
			private function refreshDataGrid(event:MethodReturnEvent):void{
//				this.tableModel = event.result as TableModel;
				if (!appModel.isAuthorized ) {
					this.errorFoundLabel = "";
					if (event == null) {
						this.errorFoundLabel = Helper.getString("noRecordsFound");
						return;
					} else if (event.error != null) {
						if (event.error.toString().match("DeliveryInDoubt")) {
							// Re try to request data for not more than 2 times
							if (count < 2) {
								count ++;
								updateCredentials();
								return;
							} else {
								this.errorFoundLabel = event.error.message;
								return;
							}
						} else {
							this.errorFoundLabel = event.error.message;
							return;
						}
					} else if (event.result == null) {
						this.errorFoundLabel = Helper.getString("noRecordsFound");
						return;
					} 
					
					
				} 
				else
				{
					this.tableModel = event.result as TableModel;
				}
				dg.dataProvider.refresh();
			}
		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout paddingLeft="15"
						  paddingRight="15"
						  paddingTop="15"
						  paddingBottom="15"/>
	</s:layout>
	
	<s:states>
		<s:State name="Loading"/>
		<s:State name="Authorized"/>
		<s:State name="NotAuthorized"/>
	</s:states>   
	
	<mx:VBox width="100%" height="100%" minHeight="0" minWidth="0">
		
		<mx:VBox  width="100%">     
			
			<mx:Text fontSize="15" fontStyle="italic" width="99%"
					 text="{Helper.getString('Hpic4vc_serverCredentials.text')}"/>             
			<s:Label text=""/>
			
			<mx:Text fontSize="15" width="99%"
					 text="{Helper.getString('Hpic4vc_serverCredentials.note')}"/> 
			
			<s:Label text=""/>
			
			<mx:Text styleName="gettingStartedPagesHeaderText"
					 text="{Helper.getString('Hpic4vc_serverCredentials.title')}"/>
			<mx:HRule width="100%"/>
			
		</mx:VBox>
		
		<s:VGroup x="0" y="45" height="100%" width="100%" includeIn="Authorized">
			<mx:HBox horizontalGap="9">
				<mx:Image source="@Embed(source='/assets/images/edit_add.png')" click="addCredentials()" toolTip="{Helper.getString('addRecord.label')}" buttonMode="true"/>
				<mx:Image source="@Embed(source='/assets/images/pencil_medium.png')" click="editCredentials()" toolTip="{Helper.getString('editRecord.label')}" buttonMode="true"/>
				<mx:Image source="@Embed(source='/assets/images/delete.png')" click="deleteCredentials()" toolTip="{Helper.getString('deleteRecord.label')}" buttonMode="true"/>
				<mx:Image source="@Embed(source='/assets/images/refresh.png')" click="updateCredentials()" toolTip="{Helper.getString('refresh.label')}" buttonMode="true"/>
			</mx:HBox>
			
			<mx:Label text="{errorFoundLabel}" 
					  visible="{errorFoundLabel.length>0}" 
					  includeInLayout="{errorFoundLabel.length>0}" 
					  styleName="errorMessage"/>
			<s:VGroup height="100%" width="100%" 
					  includeInLayout="{!(errorFoundLabel.length>0)}" visible="{!(errorFoundLabel.length>0)}" >
				<s:HGroup width="100%" horizontalAlign="right" 
						  includeInLayout="{!(errorFoundLabel.length>0)}" visible="{!(errorFoundLabel.length>0)}" id="toolbar" >
					<support:FilterTextInput watermark="Filter" color="#333333" dataGrid="{dg}"/>
				</s:HGroup>
				<grids:HPDataGrid id="dg" enablePaging="true" tableModel="{tableModel}" height="100%" width="100%"
								  includeInLayout="{!(errorFoundLabel.length>0)}" visible="{!(errorFoundLabel.length>0)}"
								  toolbar="{toolbar}" showHeaderMenu="false"
								  />
			</s:VGroup>
		</s:VGroup>
		<s:VGroup height="100%" width="100%" includeIn="NotAuthorized">
			<mx:Text text="{Helper.getString('noPermission')}" width="99%"/>
		</s:VGroup>
	</mx:VBox>
</s:Group>