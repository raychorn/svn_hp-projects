<?xml version="1.0" encoding="utf-8"?>

<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   close="PopUpManager.removePopUp(this);"
			   creationComplete="handleCreationComplete();" styleName="refreshPopUp"
			   title="Add Credentials" >
	
	<fx:Script>
		<![CDATA[
			import com.hp.asi.hpic4vc.ui.Hpic4vc_server_providerProxy;
			import com.hp.asi.hpic4vc.ui.model.TableModel;
			import com.hp.asi.hpic4vc.ui.views.Hpic4vc_serverCredentials;
			import com.vmware.flexutil.events.MethodReturnEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.ValidationResultEvent;
			import mx.validators.Validator;
			[Bindable]
			public var currentData:ArrayCollection;
			[Bindable]
			public var editMode:Boolean;
			import com.hp.asi.hpic4vc.ui.utils.Helper;
			[Bindable]
			public var _proxy:Hpic4vc_server_providerProxy;
			[Bindable]
			public var serviceGuid:String;
			
			import mx.managers.PopUpManager;
			
			[Bindable]
			private var validatorArr:Array;
			
			[Bindable]
			private var typeList:Array = ["iLO", "Onboard Administrator", "VMware Host", "Virtual Connect", "SNMP Community String", "HP SIM"];
			
			[Bindable]
			private var pwTypeValue:String;
			
			public var serverData:ArrayCollection = new ArrayCollection();
		
			[Bindable]
			public var refreshData:Hpic4vc_serverCredentials;
			
			private var oper:String;
			
			private function handleCreationComplete():void {
				
				validatorArr = new Array();
				validatorArr.push(host_stringValidator);
				validatorArr.push(username_stringValidator);
				validatorArr.push(password_stringValidator);
				
				pwTypeValue = "";
				pwTypeValue = pwType.selectedLabel;
				// Center the TitleWindow container 
				// over the control that created it.
				PopUpManager.centerPopUp(this);
				if (editMode) {
					hostLabel.enabled = false;
					userNameLabel.enabled = false;
					pwTypeLabel.enabled = false;
				}
				else {
					hostLabel.enabled = true;
					userNameLabel.enabled = true;
					pwTypeLabel.enabled = true;
				}
			}
			
			private function handleButtonClick(str:String):void {
				PopUpManager.removePopUp(this);
				// Check credentials (not shown) then remove pop up.
				if (str == "submit"){
					var oper:String;
					if (editMode)
					{
						oper = "edit";
						pwTypeValue = currentData[0].Type;
						
						if(pwTypeValue == "VMware Host"){
							pwTypeValue = "ProLiant Server";
						}

						var data:String = "oper=" + oper + ":host=" + host.text + ":username=" + userName.text + ":type=" + pwTypeValue + ":password=" + password.text;
						_proxy.updateServerCredentials(serviceGuid, data, onCredentialsUpdate);
					}
					else
					{
						oper = "add";
						this.oper = oper;
						_proxy.getServerCredentials(serviceGuid, onGettingServerCredentials);
					}
				}
				else
					PopUpManager.removePopUp(this);
			}
			
			private function onGettingServerCredentials(event:MethodReturnEvent):void
			{
				if (event.result != null) {
					var tableModel:TableModel= event.result as TableModel;
					var tableData:ArrayCollection = tableModel.rowRawData;
					var found:Boolean = false;
					for (var i:int=0; i<tableData.length; i++) {
						var eachEntry:ArrayCollection = tableData[i];
						if (eachEntry[0].toString().toLowerCase() == host.text.toLowerCase() 
							&& eachEntry[1].toString().toLowerCase() == userName.text.toLowerCase() 
							&& eachEntry[2].toString().toLowerCase() == pwTypeValue.toLowerCase()) {
							found = true;
							Alert.show(Helper.getString('ALERT_SERVER_CREDENTIALS_WARNING_ADD'), Helper.getString('ALERT_SERVER_CREDENTIALS_WARNING_ADD_CONFIG'), Alert.OK, null, null);
						}
						else
							continue;
					}
					if (!found) {
						var data:String = "oper=" + oper + ":host=" + host.text + ":username=" + userName.text + ":type=" + pwTypeValue + ":password=" + password.text;
						_proxy.updateServerCredentials(serviceGuid, data, onCredentialsUpdate);
						
					}
				}
			}
			
			private function onCredentialsUpdate(e:MethodReturnEvent):void{
				if (e.result && e.result.errorMessage)
					Alert.show(e.result.errorMessage);
				else
//					Alert.show("Successfully added credential");
					Alert.show(Helper.getString('ALERT_DEPLOYMENT_CONFIGURATION_ADD_SUCCESS'), null, Alert.OK, null, handleOk);
//				FlexGlobals.topLevelApplication.dispatchEvent(new AddOrDeleteCredentialsEvent(AddOrDeleteCredentialsEvent.UPDATE_CREDENTIALS));
				
			}
			
			private function handleOk(event:CloseEvent):void {
				
				if (refreshData != null) {
					refreshData.updateCredentials();	
				}
			}
			
			
			private function validateAndSubmit(e:Event):void{
				var errorArray:Array = Validator.validateAll(validatorArr);
				var isValid:Boolean = errorArray.length == 0;
				if(!isValid){
					
					var resultEvt:ValidationResultEvent;
					var errorMessages:Array = new Array();
					
					for each (resultEvt in errorArray){
						errorMessages.push(resultEvt.message);
					}
					
					//Alert.show(errorMessages.join("\n\n"),"Errors", Alert.OK);
				}
				else{
					var isHPEntryExists:Boolean = false;
					if(pwType.selectedItem == "HP SIM"){	
						if(serverData && serverData.length > 0){
							for(var i:int = 0; i< serverData.length; i++){
								if(ArrayCollection(serverData[i]).getItemAt(2) == pwType.selectedItem){
									isHPEntryExists = true;
									Alert.show(Helper.getString('ALERT_SERVER_CREDENTIALS_WARNING_ADD_HP_SIM'));
									break;
								}
								else{
									isHPEntryExists = false
								}
							}
							
						}
					}
					if(!isHPEntryExists){
						handleButtonClick(e.currentTarget.id)
					}
				}
			}
			
			private function pwTypeChangeHandler(e:Event):void{
				pwTypeValue = "";

				if(ComboBox(e.currentTarget).selectedItem == "VMware Host"){
					pwTypeValue = "ProLiant Server";
				}
				else{
					pwTypeValue = pwType.selectedLabel;
				}
				
			}
			
			
		]]>
	</fx:Script>
	
	
	<fx:Declarations>
		<mx:StringValidator id="host_stringValidator" source="{host}" property="text" requiredFieldError="{Helper.getString('hostReqField.text')}" />
		<mx:StringValidator id="username_stringValidator" source="{userName}" property="text" requiredFieldError="{Helper.getString('userReqField.text')}"/>
		<mx:StringValidator id="password_stringValidator" source="{password}" property="text" requiredFieldError="{Helper.getString('pwdReqField.text')}"/>
	</fx:Declarations>
	
	
	<s:VGroup>
		<s:Form id="addCred" fontSize="15">
			<s:FormItem id="hostLabel" label="{Helper.getString('LABEL_HOST')}" width="50">
				<s:TextInput id="host" text="{currentData.getItemAt(0).Host}"/>
			</s:FormItem> 
			
			<s:FormItem id="userNameLabel" label="{Helper.getString('LABEL_USERNAME')}" width="50">
				<s:TextInput id="userName" text="{currentData.getItemAt(0).Username}"/>
			</s:FormItem> 
			
			<s:FormItem id="passwordLable" label="{Helper.getString('LABEL_PASSWORD')}" width="50">
				<s:TextInput id="password" displayAsPassword="true"/>
			</s:FormItem> 
			
			<s:FormItem id="pwTypeLabel" label="{Helper.getString('LABEL_TYPE')}" width="50">
				<mx:ComboBox id="pwType" text="{currentData.getItemAt(0).Type}" dataProvider="{typeList}"
							 change="pwTypeChangeHandler(event)"/>
			</s:FormItem> 
			
		</s:Form>
	</s:VGroup>
		
	<s:controlBarContent>
		<s:Spacer width="99%"/> 
			<mx:Button id="submit" label="Submit" click="validateAndSubmit(event);"
					   paddingLeft="7"/>
			<mx:Button id="cancel" label="{Helper.getString('cancelLabel')}" click=" PopUpManager.removePopUp(this);"
					   paddingLeft="7"/>
	</s:controlBarContent>
		

	
	
</s:TitleWindow>

